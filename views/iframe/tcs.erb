<iframe id="game" src="https://treintipollo-chat-service.herokuapp.com/"></iframe>

<script type="text/javascript">

	window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;

	const dataBases = new Map();

	window.addEventListener("message", (e) =>
	{
		if (!e.origin.startsWith("https://treintipollo-chat-service.herokuapp.com"))
			return;

		switch(e.data.data.type)
		{
			case "location.search":
			{
				return void e.source.postMessage({ id: e.data.id, data: location.search }, e.origin);
			}
			case "document.title":
			{
				document.title = e.data.data.data;

				return void e.source.postMessage({ id: e.data.id }, e.origin);
			}
			case "history.replaceState":
			{
				return void history.replaceState(null, null, e.data.data.data);
			}
			case "indexDB.open":
			{
				const d = e.data.data.data;

				const dbName = d.dbName;
				const osName = d.osName;
				const keyPath = d.keyPath;
				const defaultEntry = d.defaultEntry;
				const version = d.version;

				const request = window.indexedDB.open(dbName, version);

				request.onsuccess = (event) => {
					dataBases.set(dbName, request.result);

					e.source.postMessage({ id: e.data.id, data: null, resolve: true }, e.origin);
				};

				request.onupgradeneeded = (event) => {
					const db = event.target.result;

					dataBases.set(dbName, db);

					const objStore = db.createObjectStore(osName, { keyPath: keyPath });

					if (defaultEntry)
						objStore.add(defaultEntry)
				};

				request.onerror = (event) => {
					e.source.postMessage({ id: e.data.id, data: null, reject: true }, e.origin);
				};

				break;
			}
			case "indexDB.add":
			{
				const d = e.data.data.data;

				const dbName = d.dbName;
				const osName = d.osName;
				const mode = d.mode;
				const data = d.data;

				const db = dataBases.get(dbName);

				const request = db.transaction([osName], mode).objectStore(osName).add(data);

				request.onsuccess = (event) => {
					e.source.postMessage({ id: e.data.id, data: null, resolve: true }, e.origin);
				};

				request.onerror = (event) => {
					e.source.postMessage({ id: e.data.id, data: null, reject: true }, e.origin);
				};

				break;
			}
			case "indexDB.get":
			{
				const d = e.data.data.data;

				const dbName = d.dbName;
				const osName = d.osName;
				const osId = d.osId;

				const db = dataBases.get(dbName);

				const request = db.transaction([osName]).objectStore(osName).get(osId);

				request.onsuccess = (event) => {
					e.source.postMessage({ id: e.data.id, data: request.result, resolve: true }, e.origin);
				};

				request.onerror = (event) => {
					e.source.postMessage({ id: e.data.id, data: null, reject: true }, e.origin);
				};

				break;
			}
			case "indexDB.put":
			{
				const d = e.data.data.data;

				const dbName = d.dbName;
				const osName = d.osName;
				const osId = d.osId;
				const mode = d.mode;
				const data = d.data;

				const db = dataBases.get(dbName);

				const objStore = db.transaction([osName], mode).objectStore(osName);
				const getRequest = objStore.get(osId);

				getRequest.onsuccess = (event) => {
					const putRequest = objStore.put(data);

					putRequest.onsuccess = (event) => {
						e.source.postMessage({ id: e.data.id, data: null, resolve: true }, e.origin);
					};
					
					putRequest.onerror = (event) => {
						e.source.postMessage({ id: e.data.id, data: null, reject: true }, e.origin);
					};
				};

				getRequest.onerror = (event) => {
					e.source.postMessage({ id: e.data.id, data: null, reject: true }, e.origin);
				};

				break;
			}
		}
	});

</script>

